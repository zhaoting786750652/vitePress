import{_ as t,o as e,c as a,R as s}from"./chunks/framework.912ee41a.js";const _=JSON.parse('{"title":"网络相关","description":"","frontmatter":{},"headers":[],"relativePath":"page/Network.md","filePath":"page/Network.md","lastUpdated":1685694891000}'),p={name:"page/Network.md"},l=s(`<h1 id="网络相关" tabindex="-1">网络相关 <a class="header-anchor" href="#网络相关" aria-label="Permalink to &quot;网络相关&quot;">​</a></h1><h2 id="https的验证流程" tabindex="-1">HTTPS的验证流程 <a class="header-anchor" href="#https的验证流程" aria-label="Permalink to &quot;HTTPS的验证流程&quot;">​</a></h2><p>1.在使用HTTPS是需要保证服务端配置正确了对应的安全证书</p><p>2.客户端发送请求到服务端</p><p>3.服务端返回公钥和证书到客户端（公钥一般放在证书里）</p><p>4.客户端接收后会验证证书的安全性,如果通过则会随机生成一个随机数,用公钥对其加密,发送到服务端</p><p>5.服务端接受到这个加密后的随机数后会用私钥对其解密得到真正的随机数,随后用这个随机数当做私钥对需要发送的数据进行对称加密</p><p>6.客户端在接收到加密后的数据使用私钥(即生成的随机值)对数据进行解密并且解析数据呈现结果给客户</p><br><h2 id="http的发展" tabindex="-1">Http的发展 <a class="header-anchor" href="#http的发展" aria-label="Permalink to &quot;Http的发展&quot;">​</a></h2><p>1.HTTP 1.0</p><ul><li>HTTP 协议是无状态的，即同一客户端每次请求都没有任何关系</li><li>消息结构包含请求头和请求体</li></ul><p>2.HTTP 1.1</p><ul><li>引入了持久连接，即 TCP 连接默认不关闭，可以被多个请求复用</li><li>在同一个 TCP 连接里面，客户端可以同时发送多个请求</li><li>虽然允许复用 TCP 连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。（有序并阻塞）</li><li>新增了一些请求方法（如 PUT、DELETE 等）、新增一些请求头和响应头</li></ul><p>3.HTTP 2.0</p><ul><li>采用二进制格式而非文本格式</li><li>完全多路复用，只需一个连接即可实现并行</li><li>使用报头压缩，降低开销</li><li>服务器推送</li></ul><p>4.HTTPS</p><ul><li>使用了 SSL/TLS 协议进行了加密处理，相对更安全</li><li>默认端口 443</li><li>由于需要设计加密以及多次握手，实际性能会稍逊 HTTP</li></ul><h2 id="http与https的区别" tabindex="-1">Http与Https的区别 <a class="header-anchor" href="#http与https的区别" aria-label="Permalink to &quot;Http与Https的区别&quot;">​</a></h2><ol><li><p>https协议需要到CA （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。) 对称加密 （加密和解密都是同一个密钥）和 非对称加密 （密钥成对出现，分为公钥和私钥，公钥和私钥之间不能互相推导，公钥加密需要私钥解密，私钥加密需要公钥解密）结合的方式</p></li><li><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议（）。</p></li><li><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p></li><li><p>http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p></li><li><p>使用Https协议可认证用户和服务器，确保数据发送到正确的客户机和服务器</p></li></ol><h2 id="xss和csrf" tabindex="-1">XSS和CSRF <a class="header-anchor" href="#xss和csrf" aria-label="Permalink to &quot;XSS和CSRF&quot;">​</a></h2><p>1.防御XSS攻击 -HttpOnly 防止劫取 Cookie(在浏览器存储-cookie字段可以看见HttpOnly属性是否打勾) -用户的输入检查 -服务端的输出检查</p><p>2.防御CSRF攻击 -Referer Check：服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点（图片防盗链） -验证码 -token 验证。请求头里加上服务器端返回的 token -请求头里用双方约定好的格式和密钥进行加密</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const appsecret = &#39;123456&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  const signRule = path + &#39;|&#39; + v + &#39;|&#39; + appid + &#39;|&#39; + appsecret + &#39;|&#39; + t + &#39;|&#39; + token + &#39;|&#39; + clientinfo + &#39;|&#39; + clientversion + &#39;|&#39; + requestbody</span></span>
<span class="line"><span style="color:#A6ACCD;">  const sign = md5(signRule)</span></span>
<span class="line"><span style="color:#A6ACCD;">  config.headers[&#39;x-sign&#39;] = sign</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被 攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。CSRF 攻击的本质是利用了 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p>`,25),i=[l];function n(r,o,c,h,d,u){return e(),a("div",null,i)}const C=t(p,[["render",n]]);export{_ as __pageData,C as default};
